import type { Theme } from '../models'
import { ThemeGenerationResult } from '../results/ThemeGenerationResult'
import { shuffle } from './shuffle'
import { staticImplements, type ContextBase, type Process, type ProcessStatic } from './types'

/**
 * Process: uses an LLM to generate themes from input strings.
 *
 * It samples a subset of the input dataset
 * to speed up the theme generation process. A maximum of 200 texts
 * is used in fast mode, while 1000 texts are used in normal mode.
 *
 * @remarks
 * This process is typically used as a precursor to theme extraction
 * or theme allocation processes.
 * It generates a set of themes based on the input dataset,
 * which can then be used for further analysis or categorization.
 * The themes are generated by analyzing the input texts and identifying
 * common patterns or topics.
 * The themes can be used to group similar texts together,
 * or to identify key topics within the dataset.
 *
 * @example Using the process manually:
 *
 * const themeGen = new ThemeGeneration({
 *     minThemes: 3,
 *     maxThemes: 10,
 *     context: 'customer feedback',
 *     fast: true
 * });
 * const result = await themeGen.run(context);
 * console.log(result.themes); // Output: Array of generated themes
 *
 * @example Using the process in a Analyzer pipeline:
 * const pipeline = new Analyzer({
 *     dataset: ['text1', 'text2', 'text3'],
 *     processes: [
 *         new ThemeGeneration({
 *            minThemes: 3,
 *            maxThemes: 10,
 *            context: 'customer feedback',
 *            fast: true
 *        })
 *     ]
 * });
 * const result = await pipeline.run(context);
 * console.log(result.themes); // Output: Array of generated themes
 *
 * @public
 * @template Name - The name of the process, defaults to 'theme_generation'.
 * @extends Process<Name, ThemeGenerationResult>
 * @implements ProcessStatic<'theme_generation', ThemeGenerationResult>
 * @see {@link ThemeGenerationResult} for the structure of the result.
 * @see {@link Theme} for the structure of a theme.
 * @see {@link ContextBase} for the context in which the process runs.
 * @see {@link Process} for the base process interface.
 * @see {@link ProcessStatic} for the static interface of a process.
 * @see {@link shuffle} for the utility function used to randomize input texts.
 */
@staticImplements<ProcessStatic<'theme_generation', ThemeGenerationResult>>()
export class ThemeGeneration<Name extends string = 'theme_generation'>
    implements Process<Name, ThemeGenerationResult>
{
    /**
     * Unique identifier for the theme generation process.
     *
     * This ID is used to register and reference the ThemeGeneration process
     * within the system.
     */
    static readonly id = 'theme_generation'
    /**
     * The name of the process.
     *
     * @remarks
     * The name is used to identify the process in the context of an analysis pipeline.
     * It defaults to the static ID of the process, but can be customized.
     *
     * Results from this process can be accessed using this name in the context of an analysis pipeline.
     */
    readonly name: Name
    /**
     * Dependencies of the process.
     */
    dependsOn: string[] = []

    /**
     * The minimum number of themes that should be generated or maintained.
     * Used to ensure that at least this many themes are present in the system.
     */
    minThemes: number
    /**
     * The maximum number of themes that can be generated or handled.
     * This value is used to limit the total number of themes in the theme generation process.
     */
    maxThemes: number
    /**
     * An optional string providing additional information or context for the theme generation process.
     * Can be used to specify the source, environment, or any relevant details.
     *
     * @remarks
     * Do not confuse this with the context of the analysis pipeline.
     * This context is specific to the theme generation process and can help guide the LLM in
     * generating relevant themes.
     */
    context?: string
    /**
     * If set to `true`, enables a faster, potentially less thorough processing mode.
     * Useful for scenarios where speed is prioritized over completeness or accuracy.
     */
    fast?: boolean

    /**
     * Constructs a new instance of the ThemeGeneration class.
     *
     * @param options - Optional configuration object for theme generation.
     * @param options.name - The name to assign to the theme generation instance. Defaults to the static `id` property if not provided.
     * @param options.minThemes - The minimum number of themes to generate. Defaults to 2.
     * @param options.maxThemes - The maximum number of themes to generate. Defaults to 50.
     * @param options.context - An optional context string to provide additional information for theme generation.
     * @param options.fast - If true, enables fast mode for theme generation.
     */
    constructor(
        options: {
            name?: Name
            minThemes?: number
            maxThemes?: number
            context?: string
            fast?: boolean
        } = {}
    ) {
        this.name = options.name ?? (ThemeGeneration.id as Name)
        this.minThemes = options.minThemes ?? 2
        this.maxThemes = options.maxThemes ?? 50
        this.context = options.context
        this.fast = options.fast
    }

    /**
     * Gets the unique identifier for the ThemeGeneration process.
     *
     * @returns The static `id` property of the ThemeGeneration class.
     */
    get id() {
        return ThemeGeneration.id
    }

    /**
     * Executes the theme generation process using the provided context.
     *
     * - Optionally samples a subset of the dataset based on the `fast` flag.
     * - Calls the client's `generateThemes` method with the sampled texts and configuration options.
     * - Returns a `ThemeGenerationResult` containing the generated themes.
     *
     * @param ctx - The context containing the dataset, client, and configuration options.
     * @returns A promise that resolves to a `ThemeGenerationResult` with the generated themes.
     */
    async run(ctx: ContextBase) {
        let texts: string[] = ctx.dataset.slice()
        const fastFlag = this.fast ?? ctx.fast
        const sampleSize = fastFlag ? 200 : 1000
        if (texts.length > sampleSize) {
            texts = shuffle(texts).slice(0, sampleSize)
        }
        const response = await ctx.client.generateThemes(texts, {
            minThemes: this.minThemes,
            maxThemes: this.maxThemes,
            fast: fastFlag,
        })

        return new ThemeGenerationResult(response)
    }
}

/**
 * Abstract base class for processes that depend on theme generation.
 *
 * @remarks
 * This class provides mechanisms for handling dependencies on theme generation processes,
 * allowing derived classes to specify themes directly or inherit them from a previous
 * {@link ThemeGeneration} process. It also provides utility methods for extracting theme
 * labels and representatives from the context.
 *
 * @property themes
 * An optional array of themes or theme labels to use for the process. If not provided,
 * themes are fetched from the results of a previous {@link ThemeGeneration} process.
 *
 * @property dependsOn
 * An array of process IDs that this process depends on. The process will not execute
 * until all dependencies listed here have completed.
 *
 * @method themeLabels
 * Returns an array of theme labels, either from the provided themes or from the previous
 * theme generation results.
 *
 * @method themeRepresentatives
 * Returns an array of theme representatives, either from the provided themes or from the
 * previous theme generation results.
 *
 * @method getThemes
 * Retrieves the list of themes to use, either from the `themes` property or from the
 * results of a previous {@link ThemeGeneration} process.
 */
export abstract class ThemeGenerationDependent {
    /**
     * An optional list of themes to use for the process.
     * If not provided, the themes will be fetched from the results of a previous ThemeGeneration process.
     *
     * @remarks
     * If this property is set, it should be an array of `Theme` objects or strings representing theme labels.
     * If not set, the themes will be derived from the results of a previous ThemeGeneration process.
     */
    readonly themes?: Theme[] | string[]
    /**
     * Specifies the list of process IDs that this process depends on.
     * The process will not execute until all dependencies listed here have completed.
     *
     * @remarks
     * Each string in the array should correspond to the `id` of another process.
     *
     * @example
     * ```typescript
     * dependsOn: string[] = [ThemeGeneration.id]
     * ```
     */
    dependsOn: string[] = []

    constructor(options: { themes?: Theme[] | string[] } = {}) {
        this.themes = options.themes
        this.dependsOn = options.themes ? [] : [ThemeGeneration.id]
    }

    protected themeLabels(ctx: ContextBase): string[] {
        const themes = this.getThemes(ctx)

        if (typeof themes[0] === 'string') {
            return themes as string[]
        } else {
            return (themes as Theme[]).map(t => t.shortLabel ?? t.label)
        }
    }

    protected themeRepresentatives(ctx: ContextBase): string[] {
        const themes = this.getThemes(ctx)

        if (typeof themes[0] === 'string') {
            return themes as string[]
        } else {
            return (themes as Theme[]).map(t => t.representatives.join('\n'))
        }
    }

    private getThemes(ctx: ContextBase): Theme[] | string[] {
        if (this.themes != null) {
            return this.themes.slice()
        } else {
            const tgProcess = ctx.processes.find(
                p => p.id === ThemeGeneration.id
            ) as ThemeGeneration
            return (ctx.results[tgProcess.name] as ThemeGenerationResult).themes.slice()
        }
    }
}
