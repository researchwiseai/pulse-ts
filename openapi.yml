---
openapi: 3.1.0
info:
    title: Pulse API
    version: 0.6.0
    description: |
        A stateless RESTful service that provides **six** core capabilities:

          - Batch generation of dense vector embeddings for up to 200 input strings.
          - Flexible cosine-similarity computations across strings.
          - Thematic clustering of open-ended text into concise, human-readable themes.
          - Sentiment classification of each input string.
          - Extraction of text elements matching specified themes from input strings.
          - Clustering of text into groups using vector embeddings.

        ### Similarity

        The similarity endpoint supports two scenarios:

          1. **Self-similarity** - Provide a single set of strings (`set`) and the
             service **always** returns a **flattened** upper-triangle similarity
             vector (excluding the diagonal). The response also includes the number
             of input strings (`n`) so the caller can easily re-shape the full matrix.

          2. **Cross-similarity** - Provide two distinct sets (`set_a` and `set_b`)
             and the service returns similarities only between items across the two
             sets (|A| x |B| matrix). The representation can be `matrix` (default)
             or flattened when the `flatten=true` query parameter is supplied.

        ### Themes

        The themes endpoint groups a collection of open-ended responses (e.g., survey
        comments, product reviews) into **latent themes**. Each theme now contains:

          - `shortLabel` - a concise (2-4 word) name for dashboards or charts.
          - `label` - a slightly longer descriptive title.
          - `description` - 1-2 sentences summarizing the common idea captured by the theme.
          - `representatives` - exactly two representative input strings for each theme.

        Callers may optionally specify `minThemes`, `maxThemes`, and a free-text
        `context` string to steer clustering (e.g., "focus on UX issues").

        ### Sentiment

        The sentiment endpoint classifies each input string as **positive**, **negative**,
        **neutral**, or **mixed** and returns a confidence value ∈ [0, 1].

        ### Versioning

        The service maintains internally versioned models. When the optional `version`
        field is omitted, the latest production version is used. Supplying a `version`
        locks behaviour to that specific model version, enabling reproducible results
        even after future upgrades.

servers:
    - url: https://pulse.researchwiseai.com/v1
      description: Production API server
    - url: https://staging.pulse.researchwiseai.com/v1
      description: Staging API server

security:
    - BearerAuth: []
tags:
    - name: embeddings
      description: |
          Embeddings endpoint. Supports synchronous (fast=true) and asynchronous (fast=false or omitted) modes.
           - In synchronous mode, processes up to 200 input strings and returns embeddings immediately (HTTP 200).
           - In asynchronous mode, accepts up to 2,000 input strings and returns a job_id (HTTP 202) to poll via /jobs.
    - name: similarity
      description: |
          Similarity endpoint. Provides self- and cross-similarity computations with sync (fast=true) and async (fast=false or omitted) modes.
          - In synchronous mode, self-similarity supports up to 500 strings; cross-similarity requires |set_a|×|set_b| ≤ 20,000 (HTTP 200).
          - In asynchronous mode, supports larger inputs (self up to 44,721 strings; cross with |set_a|×|set_b| ≤ 2,000,000,000) and returns a job_id (HTTP 202).
    - name: themes
      description: |
          Themes endpoint. Clusters text into themes with sync (fast=true) and async (fast=false or omitted) modes.
          - In synchronous mode, processes up to 200 input strings and returns themes immediately (HTTP 200).
          - In asynchronous mode, accepts up to 500 input strings and returns a job_id (HTTP 202).
    - name: clustering
      description: |
          Clustering endpoint. Groups texts into clusters using kmeans, spherical k-means (skmeans), agglomerative, or HDBSCAN algorithms operating on full embeddings.
          - In synchronous mode, processes up to 200 input strings and returns clusters immediately (HTTP 200).
          - In asynchronous mode, accepts up to 500 input strings and returns a job_id (HTTP 202).
    - name: sentiment
      description: |
          Sentiment endpoint. Classifies sentiment with sync (fast=true) and async (fast=false or omitted) modes.
          - In synchronous mode, processes up to 200 input strings (HTTP 200).
          - In asynchronous mode, accepts up to 10,000 input strings and returns a job_id (HTTP 202).
    - name: extractions
      description: |
          Extractions endpoint. Extracts elements matching themes with sync (fast=true) and async (fast=false or omitted) modes.
          - Both modes support up to 200 input strings and up to 50 themes.
          - Synchronous returns immediate results (HTTP 200); asynchronous returns a job_id (HTTP 202).
    - name: jobs
      description: |
          Jobs endpoint. Poll job status for asynchronous requests generated by other endpoints.
          - Retrieve status and result URL for completed jobs.

paths:
    /embeddings:
        post:
            operationId: createEmbeddings
            summary:
                Generate dense vector embeddings for input strings (synchronous or asynchronous).
            description: |
                Generates dense vector embeddings for input strings in a single batch.
                Supports synchronous (fast=true) and asynchronous (fast=false or omitted) modes.

                • Synchronous mode processes up to 200 input strings and returns embeddings immediately (HTTP 200).
                • Asynchronous mode accepts up to 2,000 input strings and returns a job_id (HTTP 202) to poll via the /jobs endpoint.
            tags: [embeddings]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/EmbeddingsRequest'
                        examples:
                            Default:
                                summary: Sample embeddings request
                                value:
                                    inputs: ['Hello world', 'Test input']
            responses:
                '200':
                    description: Embeddings successfully created.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/EmbeddingsResponse'
                            examples:
                                EmbeddingsResponseExample:
                                    summary: Sample successful response
                                    value:
                                        embeddings:
                                            - text: 'Hello world'
                                              vector: [0.1, 0.2, 0.3]
                                            - text: 'Test input'
                                              vector: [0.4, 0.5, 0.6]
                                        requestId: 'example-request-id'
                '400':
                    description: Bad request - validation error (e.g., >200 strings).
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                            examples:
                                InvalidEmbeddingsRequest:
                                    summary: Sample validation error response
                                    value:
                                        message:
                                            'Validation error: inputs must be an array of up to 200
                                            strings.'

    /similarity:
        post:
            operationId: compareSimilarity
            summary: Compute cosine similarity between strings (self or cross).
            description: |
                Computes pairwise cosine similarity between input strings.
                Supports self-similarity (provide `set`) and cross-similarity (provide `set_a` and `set_b`), with synchronous (`fast=true`) and asynchronous (`fast=false` or omitted) modes.

                • In synchronous mode, self-similarity supports up to 500 input strings; cross-similarity requires |set_a|×|set_b| ≤ 20,000. Returns similarities immediately (HTTP 200).
                • In asynchronous mode, supports larger inputs (self up to 44,721 items; cross with |set_a|×|set_b| ≤ 2,000,000,000) and returns a job_id (HTTP 202) to poll via the /jobs endpoint.
            tags: [similarity]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SimilarityRequest'
                        examples:
                            SelfExample:
                                summary: Self-similarity request
                                value:
                                    set: ['alpha', 'beta', 'gamma']
                            CrossExample:
                                summary: Cross-similarity request
                                value:
                                    set_a: ['apple', 'banana']
                                    set_b: ['orange', 'pear']
                                    version: 'v1'
                            SplitExample:
                                summary: Sentence and newline splitting
                                value:
                                    set_a: ["red\nblue"]
                                    set_b: ['Hello world. Goodbye world.']
                                    split:
                                        set_a: newline
                                        set_b:
                                            unit: sentence
                                            agg: max
                                    flatten: true
            responses:
                '200':
                    description: Similarity values returned successfully.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SimilarityResponse'
                            examples:
                                SimilarityMatrixExample:
                                    summary: Cross-similarity matrix response
                                    value:
                                        scenario: 'cross'
                                        mode: 'matrix'
                                        matrix: [[1.0, 0.8], [0.8, 1.0]]
                                        flattened: [1.0, 0.8, 0.8, 1.0]
                                        requestId: 'example-request-id'
                                SplitResponseExample:
                                    summary: Sentence/newline splitting response
                                    value:
                                        scenario: 'cross'
                                        mode: 'flattened'
                                        n: 1
                                        flattened: [0.9]
                                        requestId: 'example-request-id'
                '400':
                    description: Bad request - validation error (e.g., invalid input).
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                            examples:
                                InvalidSimilarityRequest:
                                    summary: Sample validation error response
                                    value:
                                        message:
                                            "Invalid request: either 'set' or both 'set_a' and
                                            'set_b' must be provided."

    /themes:
        post:
            operationId: generateThemes
            summary: Cluster open-ended text responses into thematic groups.
            description: |
                Groups input strings into latent themes using LLM-based clustering.
                Supports synchronous (fast=true) and asynchronous (fast=false or omitted) modes.

                 - In synchronous mode, processes up to 200 input strings and returns themes immediately (HTTP 200).
                 - In asynchronous mode, accepts up to 500 input strings and returns a job_id (HTTP 202) to poll via the /jobs endpoint.

                Each theme includes a `shortLabel`, `label`, `description`, and exactly two representative input strings.
                Optionally control theme count with `minThemes`, `maxThemes`, and steer focus via `context`.
            tags: [themes]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ThemesRequest'
                        examples:
                            Default:
                                summary: Basic themes request
                                value:
                                    inputs: ['fast service', 'slow response', 'easy setup']
                            WithOptions:
                                summary: Themes request with options
                                value:
                                    inputs: ['app crashes on launch', 'error message shown']
                                    minThemes: 2
                                    maxThemes: 5
                                    context: 'focus on reliability issues'
                                    version: 'v1'
                                    prune: 5
            responses:
                '200':
                    description: Thematic clustering completed successfully.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ThemesResponse'
                            examples:
                                ThemesResponseExample:
                                    summary: Sample themes response
                                    value:
                                        themes:
                                            - shortLabel: 'UI Issue'
                                              label: 'User Interface Issues'
                                              description: 'Problems related to layout and design.'
                                              representatives:
                                                  - 'Button not aligned'
                                                  - 'Text too small'
                                        requestId: 'example-request-id'
                '400':
                    description: Bad request - validation error (e.g., inputs >200 strings).
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                            examples:
                                InvalidThemesRequest:
                                    summary: Sample validation error response
                                    value:
                                        message:
                                            'Validation error: inputs must be an array of 2 to 500
                                            strings.'

    /clustering:
        post:
            operationId: clusterTexts
            summary: Cluster texts using vector embeddings.
            description: |
                Performs server-side clustering of input strings using algorithms that operate on full embeddings.
                Supports synchronous (fast=true) and asynchronous (fast=false or omitted) modes.

                 - In synchronous mode, processes up to 200 input strings and returns clusters immediately (HTTP 200).
                 - In asynchronous mode, accepts up to 500 input strings and returns a job_id (HTTP 202) to poll via the /jobs endpoint.
            tags: [clustering]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ClusteringRequest'
                        examples:
                            Default:
                                summary: Basic clustering request
                                value:
                                    inputs: ['doc one', 'doc two']
                                    k: 2
                            WithAlgorithm:
                                summary: Specify algorithm
                                value:
                                    inputs: ['a', 'b', 'c']
                                    k: 2
                                    algorithm: agglomerative
                            HDBSCAN:
                                summary: Use HDBSCAN
                                value:
                                    inputs: ['a', 'b', 'c', 'd']
                                    k: 2
                                    algorithm: hdbscan
                            SKMeans:
                                summary: Use spherical k-means
                                value:
                                    inputs: ['one', 'two', 'three']
                                    k: 2
                                    algorithm: skmeans
            responses:
                '200':
                    description: Clustering completed successfully.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ClusteringResponse'
                '400':
                    description: Bad request - validation error.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    /sentiment:
        post:
            operationId: analyzeSentiment
            summary: Classify sentiment of each input string.
            description: |
                Classifies the sentiment of each input string as positive, negative, neutral, or mixed, with confidence scores ∈ [0,1].
                Supports synchronous (fast=true) and asynchronous (fast=false or omitted) modes.

                 - In synchronous mode, processes up to 200 input strings and returns results immediately (HTTP 200).
                 - In asynchronous mode, accepts up to 10,000 input strings and returns a job_id (HTTP 202) to poll via the /jobs endpoint.

                Optionally supply `version` for reproducible outputs.
            tags: [sentiment]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SentimentRequest'
                        examples:
                            Default:
                                summary: Basic sentiment request
                                value:
                                    inputs: ['I love this', 'I hate that']
                            WithVersion:
                                summary: Sentiment request with version
                                value:
                                    inputs: ['It was okay']
                                    version: 'v1'
            responses:
                '200':
                    description: Sentiment analysis results.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SentimentResponse'
                            examples:
                                SentimentResponseExample:
                                    summary: Sample sentiment response
                                    value:
                                        results:
                                            - sentiment: 'positive'
                                              confidence: 0.95
                                            - sentiment: 'negative'
                                              confidence: 0.85
                                        requestId: 'example-request-id'
                '400':
                    description: Bad request - validation error.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                            examples:
                                InvalidSentimentRequest:
                                    summary: Sample validation error response
                                    value:
                                        message:
                                            'Validation error: inputs must be an array of 1 to 10000
                                            strings.'

    /extractions:
        post:
            operationId: extractElements
            summary: Extract elements matching themes from input strings.
            description: |
                Extracts substrings from inputs that match the provided themes.
                Supports synchronous (fast=true) and asynchronous (fast=false or omitted) modes.

                 - Both modes support up to 200 input strings and up to 50 themes.
                 - Synchronous mode returns extraction results immediately (HTTP 200).
                 - Asynchronous mode returns a job_id (HTTP 202) to poll via the /jobs endpoint.

                Returns a 3-dimensional array where `extractions[i][j]` contains matching elements for input `i` and theme `j`.
            tags: [extractions]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ExtractionsRequest'
                        examples:
                            Default:
                                summary: Basic extractions request
                                value:
                                    inputs: ['The food was great and the service was slow.']
                                    themes: ['food', 'service']
            responses:
                '200':
                    description: Extraction results returned successfully.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ExtractionsResponse'
                            examples:
                                ExtractionsResponseExample:
                                    summary: Sample extractions response
                                    value:
                                        extractions:
                                            - - ['food was great']
                                              - ['service was slow']
                                        requestId: 'example-request-id'
                '400':
                    description: Bad request - validation error.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                            examples:
                                InvalidExtractionsRequest:
                                    summary: Sample validation error response
                                    value:
                                        message:
                                            'Validation error: inputs must be an array of 1 to 200
                                            strings and themes must be an array of 1 to 50 strings.'

    /summaries:
        post:
            operationId: generateSummary
            summary: Summarize text according to a question.
            description: |
                Generates a short summary from the provided inputs.
                Supports synchronous (fast=true) and asynchronous (fast=false or omitted) modes.

                 - Synchronous mode accepts up to 200 input strings and returns the summary immediately (HTTP 200).
                 - Asynchronous mode accepts up to 5,000 input strings and returns a job_id (HTTP 202) to poll via the /jobs endpoint.
            tags: [summaries]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SummariesRequest'
                        examples:
                            Default:
                                summary: Basic summaries request
                                value:
                                    inputs: ['Hello world']
                                    question: 'What is said?'
            responses:
                '200':
                    description: Summary returned successfully.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SummariesResponse'
                '400':
                    description: Bad request - validation error.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'

    /jobs:
        get:
            operationId: getJobStatus
            summary: Retrieve status of an asynchronous job.
            description: |
                Retrieves the status of a previously submitted long-running job.
                Returns `pending`, `completed`, or `failed`. When `completed`, includes
                a `result_url` to download results.
            tags: [jobs]
            parameters:
                - in: query
                  name: jobId
                  required: true
                  schema:
                      type: string
                  description: Unique identifier for the job.
            responses:
                '200':
                    description: Job status returned successfully.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/JobStatusResponse'
                '400':
                    description: Missing or invalid jobId query parameter.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                            examples:
                                MissingJobId:
                                    summary: Missing jobId error response
                                    value:
                                        message: 'Missing jobId query parameter'
                '404':
                    description: Job not found.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                            examples:
                                JobNotFound:
                                    summary: Job not found error response
                                    value:
                                        message: 'Job not found'
                '500':
                    description: Internal server error.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                            examples:
                                InternalError:
                                    summary: Internal server error response
                                    value:
                                        message: 'Internal server error'

components:
    securitySchemes:
        BearerAuth:
            type: http
            scheme: bearer
            bearerFormat: JWT
            description: |
                Clients must send a JWT in the Authorization header:
                  Authorization: Bearer <token>
                The token must include:
                  - issuer (iss) claim: https://research-wise-ai-eu.eu.auth0.com/
                - audience (aud) claim: https://core.researchwiseai.com/pulse/v1
                To obtain a token via Auth0 client credentials flow:
                  1. Send a POST request to https://research-wise-ai-eu.eu.auth0.com/oauth/token with:
                     Content-Type: application/json
                     {
                       "client_id": "<YOUR_CLIENT_ID>",
                       "client_secret": "<YOUR_CLIENT_SECRET>",
                       "audience": "https://core.researchwiseai.com/pulse/v1",
                       "grant_type": "client_credentials"
                     }
                  2. Extract the "access_token" field from the response.
                  3. Use the token in the Authorization header for API requests: Bearer <access_token>

    schemas:
        ErrorResponse:
            type: object
            properties:
                message:
                    type: string
                details:
                    type: array
                    description: Optional array of error detail messages
                    items:
                        type: string
                    maxItems: 10
            required: [message]
            additionalProperties: false
        EmbeddingsRequest:
            type: object
            properties:
                inputs:
                    type: array
                    maxItems: 2000
                    description:
                        List of input strings. For synchronous (fast=true) mode, max 200; for
                        asynchronous (fast=false or omitted) mode, max 2000.
                    items:
                        type: string
                fast:
                    type: boolean
                    description:
                        Flag indicating synchronous (true) or asynchronous (false) processing.
                        Default false.
            required: [inputs]
            additionalProperties: false

        EmbeddingDocument:
            type: object
            properties:
                id:
                    type: string
                text:
                    type: string
                vector:
                    type: array
                    items:
                        type: number
                        format: float
                    minItems: 1
                    maxItems: 8192
            required: [text, vector]
            additionalProperties: false

        EmbeddingsResponse:
            type: object
            properties:
                embeddings:
                    type: array
                    maxItems: 200
                    items:
                        $ref: '#/components/schemas/EmbeddingDocument'
                requestId:
                    type: string
            required: [embeddings, requestId]
            additionalProperties: false

        UnitAgg:
            oneOf:
                - type: string
                  enum: [sentence, newline]
                - type: object
                  properties:
                      unit:
                          type: string
                          enum: [sentence, newline]
                      agg:
                          type: string
                          enum: [mean, max]
                          default: mean
                  required: [unit]
                  additionalProperties: false

        Split:
            oneOf:
                - $ref: '#/components/schemas/UnitAgg'
                - type: object
                  properties:
                      set_a:
                          $ref: '#/components/schemas/UnitAgg'
                      set_b:
                          $ref: '#/components/schemas/UnitAgg'
                  additionalProperties: false

        SimilarityRequest:
            type: object
            properties:
                set:
                    type: array
                    minItems: 2
                    maxItems: 44721
                    description:
                        Array of strings for self-similarity. For synchronous (fast=true), max 500;
                        for asynchronous (fast=false or omitted), max 44,721.
                    items:
                        type: string
                set_a:
                    type: array
                    minItems: 1
                    maxItems: 2000000000
                    description:
                        Array of strings for cross-similarity. For synchronous (fast=true), ensure
                        |set_a|×|set_b| ≤ 20,000; for asynchronous (fast=false or omitted), ensure
                        |set_a|×|set_b| ≤ 2,000,000,000.
                    items:
                        type: string
                set_b:
                    type: array
                    minItems: 1
                    maxItems: 2000000000
                    description:
                        Array of strings for cross-similarity. For synchronous (fast=true), ensure
                        |set_a|×|set_b| ≤ 20,000; for asynchronous (fast=false or omitted), ensure
                        |set_a|×|set_b| ≤ 2,000,000,000.
                    items:
                        type: string
                version:
                    type: string
                fast:
                    type: boolean
                    description:
                        Flag indicating synchronous (true) or asynchronous (false) processing.
                        Default false.
                flatten:
                    type: boolean
                    description:
                        For cross-similarity, flatten the matrix into a 1-D array. Ignored for
                        self-similarity. Default false.
                split:
                    $ref: '#/components/schemas/Split'
            oneOf:
                - required: [set]
                - required: [set_a, set_b]
            additionalProperties: false

        SimilarityResponse:
            type: object
            properties:
                scenario:
                    type: string
                    enum: [self, cross]
                mode:
                    type: string
                    enum: [matrix, flattened]
                n:
                    type: integer
                flattened:
                    type: array
                    maxItems: 2000000000
                    items:
                        type: number
                        format: float
                matrix:
                    type: array
                    maxItems: 2000000000
                    items:
                        type: array
                        maxItems: 2000000000
                        items:
                            type: number
                            format: float
                requestId:
                    type: string
            required: [scenario, mode, n, flattened, requestId]
            additionalProperties: false

        ThemesRequest:
            type: object
            properties:
                inputs:
                    type: array
                    minItems: 2
                    maxItems: 500
                    description:
                        List of input strings. For synchronous (fast=true) mode, max 200; for
                        asynchronous (fast=false or omitted) mode, max 500.
                    items:
                        type: string
                minThemes:
                    type: integer
                    minimum: 1
                maxThemes:
                    type: integer
                    maximum: 50
                context:
                    type: string
                version:
                    type: string
                prune:
                    type: integer
                    minimum: 0
                    maximum: 50
                fast:
                    type: boolean
                    description:
                        Flag indicating synchronous (true) or asynchronous (false) processing.
                        Default false.
            required: [inputs]
            additionalProperties: false

        Theme:
            type: object
            properties:
                shortLabel:
                    type: string
                label:
                    type: string
                description:
                    type: string
                representatives:
                    type: array
                    description: Two representative input strings for the theme.
                    minItems: 2
                    maxItems: 2
                    items:
                        type: string
            required: [shortLabel, label, description, representatives]
            additionalProperties: false

        ThemesResponse:
            type: object
            properties:
                themes:
                    type: array
                    maxItems: 50
                    items:
                        $ref: '#/components/schemas/Theme'
                requestId:
                    type: string
            required: [themes, requestId]
            additionalProperties: false

        ClusteringRequest:
            type: object
            properties:
                inputs:
                    type: array
                    minItems: 2
                    maxItems: 500
                    description: |
                        List of input strings to cluster. For synchronous (fast=true) mode, max 200; asynchronous max 500.
                    items:
                        type: string
                k:
                    type: integer
                    minimum: 1
                    maximum: 50
                algorithm:
                    type: string
                    enum: [kmeans, skmeans, agglomerative, hdbscan]
                fast:
                    type: boolean
                    description:
                        Flag indicating synchronous (true) or asynchronous (false) processing.
            required: [inputs, k]
            additionalProperties: false

        Cluster:
            type: object
            properties:
                clusterId:
                    type: integer
                items:
                    type: array
                    items:
                        type: string
            required: [clusterId, items]
            additionalProperties: false

        ClusteringResponse:
            type: object
            properties:
                algorithm:
                    type: string
                clusters:
                    type: array
                    items:
                        $ref: '#/components/schemas/Cluster'
                requestId:
                    type: string
            required: [algorithm, clusters, requestId]
            additionalProperties: false
        SentimentRequest:
            type: object
            properties:
                inputs:
                    type: array
                    minItems: 1
                    maxItems: 10000
                    description:
                        List of input strings. For synchronous (fast=true) mode, max 200; for
                        asynchronous (fast=false or omitted) mode, max 10,000.
                    items:
                        type: string
                version:
                    type: string
                fast:
                    type: boolean
                    description:
                        Flag indicating synchronous (true) or asynchronous (false) processing.
                        Default false.
            required: [inputs]
            additionalProperties: false

        SentimentResult:
            type: object
            properties:
                sentiment:
                    type: string
                    enum: [positive, negative, neutral, mixed]
                confidence:
                    type: number
                    minimum: 0
                    maximum: 1
            required: [sentiment, confidence]
            additionalProperties: false

        SentimentResponse:
            type: object
            properties:
                results:
                    type: array
                    maxItems: 10000
                    items:
                        $ref: '#/components/schemas/SentimentResult'
                requestId:
                    type: string
            required: [results, requestId]
            additionalProperties: false

        ExtractionsRequest:
            type: object
            properties:
                inputs:
                    type: array
                    minItems: 1
                    maxItems: 200
                    items:
                        type: string
                themes:
                    type: array
                    minItems: 1
                    maxItems: 50
                    items:
                        type: string
                version:
                    type: string
                fast:
                    type: boolean
                    description:
                        Flag indicating synchronous (true) or asynchronous (false) processing.
                        Default false.
            required: [inputs, themes]
            additionalProperties: false

        ExtractionsResponse:
            type: object
            properties:
                extractions:
                    type: array
                    description:
                        3D array of extracted elements, shape [inputs.length][themes.length][K]
                    maxItems: 1000
                    items:
                        type: array
                        maxItems: 1000
                        items:
                            type: array
                            maxItems: 1000
                            items:
                                type: string
                requestId:
                    type: string
            required: [extractions, requestId]
            additionalProperties: false

        SummariesRequest:
            type: object
            properties:
                inputs:
                    type: array
                    minItems: 1
                    maxItems: 5000
                    items:
                        type: string
                question:
                    type: string
                length:
                    type: string
                    enum: [bullet-points, short, medium, long]
                preset:
                    type: string
                    enum:
                        [
                            five-point,
                            ten-point,
                            one-tweet,
                            three-tweets,
                            one-para,
                            exec,
                            two-pager,
                            one-pager,
                        ]
                fast:
                    type: boolean
                    description:
                        Flag indicating synchronous (true) or asynchronous (false) processing.
                        Default false.
            required: [inputs, question]
            additionalProperties: false

        SummariesResponse:
            type: object
            properties:
                summary:
                    type: string
                requestId:
                    type: string
            required: [summary, requestId]
            additionalProperties: false

        JobStatusResponse:
            type: object
            properties:
                job_id:
                    type: string
                status:
                    type: string
                    enum: [pending, completed, failed]
                result_url:
                    type: string
            required: [status]
            additionalProperties: false
